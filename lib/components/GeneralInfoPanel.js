import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { View, Text, ScrollView, TouchableOpacity, Alert, } from 'react-native';
import { createStyles } from '../constants/styles';
const GeneralInfoPanel = ({ customActions, loadStorageKeys, isLoadingStorage, storageKeys, deviceInfo, onClearStorage, }) => {
    const styles = createStyles();
    const handleClearStorage = () => {
        Alert.alert('Clear Storage', 'Are you sure you want to clear all storage data? This action cannot be undone.', [
            { text: 'Cancel', style: 'cancel' },
            { text: 'Clear', style: 'destructive', onPress: onClearStorage },
        ]);
    };
    return (_jsxs(ScrollView, Object.assign({ style: styles.generalContainer, showsVerticalScrollIndicator: false }, { children: [_jsxs(View, Object.assign({ style: styles.infoSection }, { children: [_jsx(Text, Object.assign({ style: styles.sectionTitle }, { children: "Device Information" })), _jsxs(View, Object.assign({ style: styles.infoRow }, { children: [_jsx(Text, Object.assign({ style: styles.infoLabel }, { children: "App Version:" })), _jsx(Text, Object.assign({ style: styles.infoValue }, { children: deviceInfo.appVersion }))] })), _jsxs(View, Object.assign({ style: styles.infoRow }, { children: [_jsx(Text, Object.assign({ style: styles.infoLabel }, { children: "Build Number:" })), _jsx(Text, Object.assign({ style: styles.infoValue }, { children: deviceInfo.buildNumber }))] })), _jsxs(View, Object.assign({ style: styles.infoRow }, { children: [_jsx(Text, Object.assign({ style: styles.infoLabel }, { children: "System:" })), _jsxs(Text, Object.assign({ style: styles.infoValue }, { children: [deviceInfo.systemName, " ", deviceInfo.systemVersion] }))] })), _jsxs(View, Object.assign({ style: styles.infoRow }, { children: [_jsx(Text, Object.assign({ style: styles.infoLabel }, { children: "Device Model:" })), _jsx(Text, Object.assign({ style: styles.infoValue }, { children: deviceInfo.deviceModel }))] })), _jsxs(View, Object.assign({ style: styles.infoRow }, { children: [_jsx(Text, Object.assign({ style: styles.infoLabel }, { children: "Manufacturer:" })), _jsx(Text, Object.assign({ style: styles.infoValue }, { children: deviceInfo.manufacturer }))] }))] })), _jsxs(View, Object.assign({ style: styles.infoSection }, { children: [_jsx(Text, Object.assign({ style: styles.sectionTitle }, { children: "Storage Management" })), _jsx(TouchableOpacity, Object.assign({ style: styles.actionButton, onPress: loadStorageKeys, disabled: isLoadingStorage }, { children: _jsx(Text, Object.assign({ style: styles.actionButtonText }, { children: isLoadingStorage ? 'Loading...' : 'Load Storage Keys' })) })), storageKeys.length > 0 && (_jsxs(View, Object.assign({ style: styles.storageKeysContainer }, { children: [_jsx(Text, Object.assign({ style: styles.sectionTitle }, { children: "Storage Keys:" })), storageKeys.map((key, index) => (_jsxs(Text, Object.assign({ style: styles.storageKeyText }, { children: ["\u2022 ", key] }), index))), _jsx(TouchableOpacity, Object.assign({ style: [styles.actionButton, styles.clearButton], onPress: handleClearStorage }, { children: _jsx(Text, Object.assign({ style: styles.clearButtonText }, { children: "Clear All Storage" })) }))] })))] })), customActions.length > 0 && (_jsxs(View, Object.assign({ style: styles.infoSection }, { children: [_jsx(Text, Object.assign({ style: styles.sectionTitle }, { children: "Custom Actions" })), customActions.map((action, index) => (_jsx(TouchableOpacity, Object.assign({ style: styles.actionButton, onPress: action.onPress }, { children: _jsx(Text, Object.assign({ style: styles.actionButtonText }, { children: action.title })) }), index)))] }))), _jsxs(View, Object.assign({ style: styles.infoSection }, { children: [_jsx(Text, Object.assign({ style: styles.sectionTitle }, { children: "Quick Actions" })), _jsx(TouchableOpacity, Object.assign({ style: styles.actionButton }, { children: _jsx(Text, Object.assign({ style: styles.actionButtonText }, { children: "Export Logs" })) })), _jsx(TouchableOpacity, Object.assign({ style: styles.actionButton }, { children: _jsx(Text, Object.assign({ style: styles.actionButtonText }, { children: "Share Debug Info" })) })), _jsx(TouchableOpacity, Object.assign({ style: styles.actionButton }, { children: _jsx(Text, Object.assign({ style: styles.actionButtonText }, { children: "Test Network Connection" })) }))] }))] })));
};
export default GeneralInfoPanel;
